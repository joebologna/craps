package main

import (
	"fmt"
	"strings"
)

type V struct {
	ver, name, sig string
}

func main() {
	var appversions = []V{{"V2", "AppVersion2", "exp.App2(animationFiles, opts.AnimateImageObject)"}, {"V3", "AppVersion3", "exp.App3(animationFiles, opts.AnimateImageObject)"}}
	var builder strings.Builder
	builder.WriteString(`// Code generated by gen_appversion.go; DO NOT EDIT.

package main

import (
	"craps/apps/exp"
	"craps/opts"
	"embed"
	"fyne.io/fyne/v2"
)

type AppVersion int

const (
`)

	for _, v := range appversions {
		builder.WriteString(fmt.Sprintf("\t%s AppVersion = iota\n", v.name))
	}

	builder.WriteString(fmt.Sprintf("\n" +
		"\n)\n" +
		"func (app AppVersion) String() string {\n" +
		"    switch app {" +
		"\n"))

	// Add cases for the String() method
	for _, v := range appversions {
		builder.WriteString(fmt.Sprintf("\tcase %s:\n\t\treturn \"%s\"\n", v.name, v.ver))
	}

	builder.WriteString("\tdefault:\n\treturn \"Unknown\"")
	builder.WriteString(`
}
}

	func (v AppVersion) App(animationFiles embed.FS) (stuff *fyne.Container) {
    	switch v {
`)

	// Add cases for the App() method
	for _, v := range appversions {
		builder.WriteString(fmt.Sprintf("\tcase %s:\n\t\treturn %s\n", v.name, v.sig))
	}
	builder.WriteString(`default:
		panic("unsupported version")
		}
		}`)

	fmt.Println(builder.String())
}
